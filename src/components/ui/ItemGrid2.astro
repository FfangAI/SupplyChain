---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { MyLine } from '~/components/MyLine.jsx';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{items && (
  <div
    class={twMerge(
      `grid gap-8 gap-x-12 sm:gap-y-8 ${
        columns === 4
          ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
          : columns === 3
          ? 'lg:grid-cols-3 sm:grid-cols-2'
          : columns === 2
          ? 'sm:grid-cols-2'
          : ''
      }`,
      containerClass
    )}
  >
    {items.map(({ title, description, icon, image, graph, callToAction, classes: itemClasses = {} }) => (
      graph ? (
        <a
          href="../overview"
          target="_blank"
          class={twMerge('relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade', panelClass, itemClasses?.panel, 'transition duration-200 hover:shadow-lg')}
          aria-label={title}
        >
          {/* Render image if available */}
          {image && (
            <img 
              src={image.src} 
              alt={image.alt || title} 
              class="mb-2 w-10 h-auto rounded"
            />
          )}
          {/* Render data graph in the top right corner if available */}
          {graph && ( 
            <div class="absolute top-0 right-5 w-[150px] h-[80px]">
              <MyLine dataType={graph.src.replace('-', '')} graphColor={graph.src.startsWith('-') ? 'red' : 'green'} client:only="react" />
            </div>
          )}
          {(icon || defaultIcon) && (
            <Icon name={icon || defaultIcon} class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon)} />
          )}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </a>
      ) : (
        <div
          class={twMerge('relative flex flex-col intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade', panelClass, itemClasses?.panel, 'transition duration-200')}
          aria-label={title}
        >
          {/* Render image if available */}
          {image && (
            <img 
              src={image.src} 
              alt={image.alt || title} 
              class="mb-2 w-10 h-auto rounded"
            />
          )}
          {(icon || defaultIcon) && (
            <Icon name={icon || defaultIcon} class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon)} />
          )}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      )
    ))}
  </div>
)}